---
- name: Make sure that certificate directory exists
  file:
    path: "{{playbook_dir}}/.state/{{item}}"
    state: directory
  loop:
    - ca 
    - certs 
  
- name: Generate OpenSSL keys for CA and clients
  openssl_privatekey:
    path: "{{playbook_dir}}/.state/{{item}}.rsa"
    size: 2048
  loop:
    - ca/ca
    - certs/client

- name: Generate OpenSSL keys for brokers
  openssl_privatekey:
    path: "{{playbook_dir}}/.state/certs/{{item}}.rsa"
    size: 2048
  loop:
    "{{groups['brokers']}}"

- name: Generate CA certificate signing request
  openssl_csr:
    path: "{{item.path}}.csr"    
    privatekey_path: "{{item.path}}.rsa"
    common_name: "{{item.cn}}"
    key_usage:
        - digitalSignature
        - keyCertSign 
        - cRLSign
    key_usage_critical: yes
    basic_constraints: 
        - CA:TRUE
    basic_constraints_critical: yes
    use_common_name_for_san: false
  loop:
    - cn: "Kafka CA"
      path: "{{playbook_dir}}/.state/ca/ca"
  loop_control:
    label: "{{ item.cn }}"


- name: Generate self-signed CA certificates 
  openssl_certificate:
    path: "{{item.path}}.crt"    
    privatekey_path: "{{item.path}}.rsa"
    csr_path: "{{item.path}}.csr"
    provider: selfsigned
  loop:
    - cn: "OpenStack CA"
      path: "{{playbook_dir}}/.state/ca/ca"
  loop_control:
    label: "{{ item.cn }}"

- name: Create certificate signing requests for brokers
  openssl_csr:
    path: "{{playbook_dir}}/.state/certs/{{item}}.csr"    
    privatekey_path: "{{playbook_dir}}/.state/certs/{{item}}.rsa"    
    common_name: "{{item}}"
    basic_constraints: "CA:FALSE"
    basic_constraints_critical: true
    useCommonNameForSAN: false
    subject_alt_name: 
      - IP:{{hostvars[item].mgmt_ip}}
      - IP:{{hostvars[item].ansible_ssh_host}}
      - DNS:{{item}}
  loop:
    "{{groups['brokers']}}"  
    
- name: Sign CSRs for broker 
  openssl_certificate:
    path: "{{playbook_dir}}/.state/certs/{{item}}.crt"    
    csr_path: "{{playbook_dir}}/.state/certs/{{item}}.csr"
    provider: ownca
    ownca_path: "{{playbook_dir}}/.state/ca/ca.crt"
    ownca_privatekey_path: "{{playbook_dir}}/.state/ca/ca.rsa"
  loop:
    "{{groups['brokers']}}"  

- name: Create certificate signing request for clients 
  openssl_csr:
    path: "{{playbook_dir}}/.state/certs/client.csr"    
    privatekey_path: "{{playbook_dir}}/.state/certs/client.rsa"    
    common_name: "client"
    organization_name: "leftasexercise.org"
    basic_constraints: "CA:FALSE"
    basic_constraints_critical: true
    extended_key_usage: "clientAuth"
    key_usage: 
      - digitalSignature
      - keyEncipherment
    useCommonNameForSAN: false

- name: Sign CSRs for client
  openssl_certificate:
    path: "{{playbook_dir}}/.state/certs/client.crt"    
    csr_path: "{{playbook_dir}}/.state/certs/client.csr"
    provider: ownca
    ownca_path: "{{playbook_dir}}/.state/ca/ca.crt"
    ownca_privatekey_path: "{{playbook_dir}}/.state/ca/ca.rsa"


- name: Create keystores for broker 
  openssl_pkcs12:
    action: export
    path: "{{playbook_dir}}/.state/certs/{{item}}.p12"
    friendly_name: "{{item}}"
    privatekey_path: "{{playbook_dir}}/.state/certs/{{item}}.rsa"
    certificate_path: "{{playbook_dir}}/.state/certs/{{item}}.crt"
    state: present
  loop:
    "{{groups['brokers']}}"  

- name: Create keystore for client
  openssl_pkcs12:
    action: export
    path: "{{playbook_dir}}/.state/certs/client.keystore.p12"
    friendly_name: "client"
    privatekey_path: "{{playbook_dir}}/.state/certs/client.rsa"
    certificate_path: "{{playbook_dir}}/.state/certs/client.crt"
    passphrase: "kafka123"
    state: present


- name: Convert keystore to JKS format
  shell: |
    rm -f {{playbook_dir}}/.state/certs/client.keystore.jks
    keytool -importkeystore \
      -srckeystore {{playbook_dir}}/.state/certs/client.keystore.p12 \
      -destkeystore {{playbook_dir}}/.state/certs/client.keystore.jks \
      -srcstoretype pkcs12 \
      -deststoretype jks \
      -srcstorepass kafka123  \
      -deststorepass kafka123

- name: Create truststore (will be used by clients and broker)
  shell: |
    rm -f {{playbook_dir}}/.state/certs/truststore.jks
    keytool -keystore {{playbook_dir}}/.state/certs/truststore.jks  \
            -noprompt \
            -alias CARoot \
            -storepass kafka123 \
            -import \
            -file {{playbook_dir}}/.state/ca/ca.crt

- name: Create SSL configuration file for clients
  template:
    src: client_ssl_config.properties.j2
    dest: "{{playbook_dir}}/.state/client_ssl_config.properties"